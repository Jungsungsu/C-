using System;

namespace GenericDelegate
{
    delegate int Compare<T>(T a, T b);

    class MainApp
    {
        static int AscendCompare<T>(T a, T b) where T : IComparable<T>
        {
            return a.CompareTo(b);
        }

        static int DescendCompare<T>(T a, T b) where T : IComparable<T>
        {
            return a.CompareTo(b) * -1; // -1을 곱하면 자신보다 큰 경우에는 1, 같으면 0, 작은 경우에는 -1을 반환한다.
        }

        static void BubbleSort<T>(T[] DataSet, Compare<T> Comparer) // <T> 형식 매개 변수가 추가됌
        {
            int i = 0;
            int j = 0;
            T temp;

            for (i = 0; i<DataSet.Length -1; i++)
            {
                for(j=0; j<DataSet.Length - (i+1); j++)
                {
                    if(Comparer(DataSet[j], DataSet[j+1]) > 0)
                    {
                        temp = DataSet[j + 1];
                        DataSet[j + 1] = DataSet[j];
                        DataSet[j] = temp;
                    }
                }
            }
        }
        static void Main(string[] args)
        {
            int[] array = { 3, 7, 4, 2, 10 };

            Console.WriteLine("Sorting ascending...");
            BubbleSort<int>(array, new Compare<int>(AscendCompare));

            for (int i = 0; i < array.Length; i++)
                Console.Write($"{array[i]} ");

            string[] array2 = { "abc", "def", "ghi", "jkl", "mno" };

            Console.WriteLine("\nSorting descending...");
            BubbleSort<string>(array2, new Compare<string>(DescendCompare));

            for (int i = 0; i < array2.Length; i++)
                Console.Write($"{array2[i]} ");

            Console.WriteLine();
        }
    }
}

// 일반화 대리자
// 대리자는 보통의 메소드뿐 아니라 일반화 메소드도 참조할 수 있.
// Compare 대리자를 일반화해서 선언하는 형식
// delegate int Compare<T>(T a, T b);
