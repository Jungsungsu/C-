using System;

namespace MoreOnArray
{
    class MainApp
    {
        private static bool CheckPassed(int score)
        {
            if (score >= 60)
                return true;
            else
                return false;
        }

        private static void Print(int value)
        {
            Console.Write($"{value} ");
        }

        static void Main(string[] args)
        {
            int[] scores = new int[] { 80, 74, 81, 90, 34 };

            foreach (int score in scores)
                Console.Write($"{score} ");
            Console.WriteLine();

            Array.Sort(scores);
            Array.ForEach<int>(scores, new Action<int>(Print));
            Console.WriteLine();

            Console.WriteLine($"Number of dimensions : {scores.Rank}");

            Console.WriteLine("Binary Search : 81 is at {0}",
                Array.BinarySearch<int>(scores, 81));
            Console.WriteLine("Linear Search : 90 is at {0}",
                Array.IndexOf(scores, 90));

            Console.WriteLine("Everyone passed ? : {0}", // TrueForAll 메소드는 배열과 함께 조건을 검사하는 메소드를 함께 매개변수로 받습니다.

                Array.TrueForAll<int>(scores, CheckPassed));


            int index = Array.FindIndex<int>(scores, // FindIndex 메소드는 특정 조건에 부합하는 메소드를 매개 변수로 받습니. 여기에선 익명 메소드로 구현해봤습니다.
                delegate (int score )
                {
                    if (score < 60)
                        return true;
                    else
                        return false;

                });

            scores[index] = 61;

            Console.WriteLine("Everyone passed ? : {0}",
                Array.TrueForAll<int>(scores, CheckPassed)); 
            Console.WriteLine($"Old length of scores : {scores.GetLength(0)}");

            Array.Resize<int>(ref scores, 10);

            Console.WriteLine($"New length of scores : {scores.Length}");

            Array.ForEach<int>(scores, new Action<int>(Print));
            Console.WriteLine();

            Array.Clear(scores, 3, 7);

            Array.ForEach<int>(scores, new Action<int>(Print));
            Console.WriteLine();
	
                
        }
    }
}

// Array 클래스의 주요 메소드와 프로퍼티
// 분류                이름                    설명
// 정적 메소드         sort()              배열을 정렬합니다.
//                  BinarySearch<T>()   이진 탐색을 수행합니다. 꺾쐬 괄호 <,>와 그 사이에 있는 T에 대해선 잠시후에 설명하겠습니다.
//                  IndexOf()           배열에서 찾고자 하는 특정 데이터의 인덱스를 반환합니다.
//                  TruForAll<T>()      배열의 모든 요소가 지정한 조건에 부합하는지의 여부를 반환합니다.
//                  FindIndex<T>()      배열에서 지정한 조건에 부합하는 첫 번째 요소의 인덱스를 반환합니다. IndexOf() 메소드가 특정 값을 찾는데
//                                      비해, FindIndex<T>() 메소드는 지정한 조건에 바탕하여 값을 찾습니다.
//                  Resize<T>()         배열의 크기를 재조정합니다.
//                  Clear()             배열의 모든 요소를 초기화합니다. 배열이 숫자 형식 기반이면 0으로, 논리형식 기반이면 false로, 참조 형식 기반이면
//                                      Null로 초기화합니다.
//                  ForEach<T>()        배열의 모든 요소에 대해 동일한 작업을 수행하게 합니다.
// 인스턴스 메소드	    GetLength()         배열에서 지정한 차원의 길이를 반환합니다. 이 메소드 나중에 설명하게 될 다차원 배열에서 유용하게 사용됩니다.
// 프로퍼티           Length              배열 길이를 반환합니다.
//                  Rank                배열의 차원을 반환합니다.
