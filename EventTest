using System;

namespace EventTest
{
    // step1. 대리자를 선언합니다. 이 대리자는 클래스 밖에 선언해도 되고 안에 선언해도 됩니다.
    delegate void EventHandler(string message); 
    // step2. 클래스 내에 step1에서 선언한 대리자의 인스턴스를 event 한정자로 수식해서 선언합니다.
    class MyNotifier
    {
        public event EventHandler SomethingHappened; // EventHandler는 step1 절차에서 선언한 대리자 입니다.
        public void DoSomething(int number)
        {
            int temp = number % 10;

            if (temp != 0 && temp % 3 == 0)
            {
                SomethingHappened(String.Format("{0} : 짝", number)); // number가 '3','6','9'로 끝나는 값이 될때마다 이벤트가 발생합니다.
            }
        }
    }
    // step3. 이벤트 핸들러를 작성합니다. 이벤트 핸들러 step1에서 선언한 대리자와 일치하는 메소드면 됩니다.
    class MainApp
    {
        static public void MyHandler(string message) // SomethingHappened 이벤트에서 사용할 이벤트 핸들러는 EventHandler 대리자의 형식과 동일한 메소드여야 합니다. 
        {
            Console.WriteLine(message);
        }
        // step4. 클래스의 인스턴스를 생성하고 이 객체의 이벤트에 step3에서 작성한 이벤트 핸들러를 등록합니다.
        static void Main(string[] args)
        {
            MyNotifier notifier = new MyNotifier();
            notifier.SomethingHappened += new EventHandler(MyHandler); // SomethingHappened 이벤트에 MyHandler() 메소드를 이벤트 핸들러로 등록합니다.
            // step5. 이벤트가 발생하면 이벤트 핸들러가 호출됩니다.
            for (int i = 1; i<30; i++)
            {
                notifier.DoSomething(i);
            }
        }
    }
}

// 이벤트 : 특정 시간이 되었을 때 이를 알려주거나, 사용자가 버튼을 클릭했을 때 이를 알려주는 객체를 만들때 사용하는 것이다.
// 이벤트를 선언하고 사용하는 절차
// 1. 대리자를 선언 합니다. 이 대리자는 클래스 밖에 선언해도 되고 안에 선언해도 됩니다.
// 2. 클래스내에 1에서 선언한 대리자의 인스턴스를 event 한정자로 수식해서 선언합니다.
// 3. 이벤트 핸들러를 작성합니다. 이벤트 핸들러는 1에서 선언한 대리자와 일치하는 메소드면 됩니다.
// 4. 클래스의 인스턴스를 생성하고 이 객체의 이벤트에 3에서 작성한 이벤트 핸들러를 등록합니다.
// 5. 이벤트가 발생하면 이벤트 핸들러가 호출됩니다.
