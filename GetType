using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;

namespace GetType
{
    class MainApp
    {
        static void PrintInterfaces(Type type)
        {
            Console.WriteLine("------- Interfaces -------");

            Type[] interfaces = type.GetInterfaces();
            foreach (Type i in interfaces)
                Console.WriteLine("Name:{0}", i.Name);

            Console.WriteLine();
        }

        static void PrintFields(Type type)
        {
            Console.WriteLine("------- Fields -------");

            FieldInfo[] fields = type.GetFields( // 필드 목록 조회
                BindingFlags.NonPublic |
                BindingFlags.Public |
                BindingFlags.Static |
                BindingFlags.Instance);

                foreach (FieldInfo field in fields)
                {
                    String accessLevel = "protected";
                    if (field.IsPublic) accessLevel = "public";
                    else if (field.IsPrivate) accessLevel = "private";

                    Console.WriteLine("Access:{0}, Type:{1}, Name:{2}",
                        accessLevel, field.FieldType.Name, field.Name);
                }

                Console.WriteLine();
        }

        static void PrintMethods(Type type)
        {
            Console.WriteLine("------- Methods -------");

            MethodInfo[] methods = type.GetMethods();
            foreach (MethodInfo method in methods)
            {
                Console.Write("Type:{0}, Name:{1}, Parameter:",
                    method.ReturnType.Name, method.Name);

                ParameterInfo[] args = method.GetParameters();
                for (int i = 0; i < args.Length; i++)
                {
                    Console.Write("{0}", args[i].ParameterType.Name);
                    if (i < args.Length - 1)
                        Console.Write(", ");
                }
                Console.WriteLine();
            }

            Console.WriteLine();
        }
        // int 형식에는 프로퍼티가 없습니다.
        static void PrintProperties(Type type)
        {
            Console.WriteLine("------- Properties -------");

            PropertyInfo[] properties = type.GetProperties();

            foreach (PropertyInfo property in properties)
                Console.WriteLine("Type:{0}, Name:{1}",
                    property.PropertyType.Name, property.Name);

            Console.WriteLine();
        }
            

        static void Main(string[] args)
        {
            int a = 0;
            Type type = a.GetType();

            PrintInterfaces(type);
            PrintFields(type);
            PrintProperties(type);
            PrintMethods(type);
        }
    }
}
    


// 리플렉션 : 객체를 X-Ray 사진처럼 객체의 형식 정보를 들여다보는 기능
// -> 리플렉션을 사용하면 우리는 프로그램 실행 중에 객체의 형식 이름부터 프로퍼티 목록, 메소드 목록, 필드, 이벤트 목록까지 모두 열어 볼 수 있다.
// -> 형식의 이름만 있다면 동적으로 인스턴스를 만들 수도 있고, 그 인스턴스의 메소드를 호출할 수도 있다.
// -> 새로운 데이터 형식을 동적으로 만들 수도 있다.

// Object.GetType() 메소드와 Type 클래스
// Object 형식이 갖고 있는 메소드
// 1.Equals() 2.GetHashCode() 3.GetType() 4.ReferenceEquals() 5.ToString()

// 사용도 높은 메소드
//        메소드                       반환 형식               설명
//  GetConstructors()           ConstructorInfo[]       해당 형식의 모든 생성자 목록을 반환
//  GetEvents()                 EventInfo[]             해당 형식의 이벤트 목록을 반환
//  GetFields()                 FieldInfo[]             해당 형식의 필드 목록을 반환
//  GetGenericArguments()       Type[]                  해당 형식의 형식 매개 변수 목록을 반환
//  GetInterfaces()             Type[]                  해당 형식이 상속하는 인터페이스 목록을 반환
//  GetMembers()                MemberInfo[]            해당 형식의 멤버 목록을 반환
//  GetMethods()                MethodInfo[]            해당 형식의 메소드 목록을 반환
//  GetNestedTypes()            Type[]                  해당 형식의 내장 형식 목록을 반환
//  GetProperties()             PropertyInfo[]          해당 형식의 프로퍼티 목록을 반환



