using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace UsingTask
{
    class MainApp
    {
        static void Main(string[] args)
        {
            string srcFile = args[0];

            Action<object> FileCopyAction = (object state) => // 매개변수를 받는다.
            {
                String[] paths = (String[])state;
                File.Copy(paths[0], paths[1]);

                Console.WriteLine("TaskID:{0}, ThreadID:{1}, {2} was copied to {3}",
                    Task.CurrentId, Thread.CurrentThread.ManagedThreadId,
                    paths[0], paths[1]);
            };

            Task t1 = new Task(
                FileCopyAction, // 두 번째 매개 변수는 FileCopyAction의 매개변수로 사용
                new String[] { srcFile, srcFile + ".copy1" });

            Task t2 = Task.Run(() =>
            {
                FileCopyAction(new String[] { srcFile, srcFile + ".copy2" });
            });

            t1.Start(); // 생성자에서 넘겨받은 무명 함수를 비동기로 호출합니다.

            Task t3 = new Task(
                FileCopyAction,
                new string[] { srcFile, srcFile + ".copy3" });

            t3.RunSynchronously(); // Task는 코드의 비동기 실행을 위한 Start() 메소드뿐 아니라 동기 실행을 위한 RunSynchronously() 메소드도 제공

            t1.Wait(); // 비봉기 호출이 완료될때까지 기다립니다.
            t2.Wait();
            t3.Wait();
        }
    }
}

// Task와 Task<TResult>, 그리고 Parallel

